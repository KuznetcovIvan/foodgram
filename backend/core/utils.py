from io import BytesIO

from babel.dates import format_date
from reportlab.pdfbase.pdfmetrics import registerFont
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfgen.canvas import Canvas


def truncate_string(field: str, max_len: int) -> str:
    """Обрезает строку до заданной длины и добавляет троеточие,
    если строка превышает максимальную длину"""
    return field[:max_len] + '...' if len(field) > max_len else field


def get_shopping_cart_pdf(product_list, date, request):
    """Генерирует PDF файл со списком покупок"""
    buffer = BytesIO()
    p = Canvas(buffer)
    registerFont(TTFont(
        'DejaVuSansMono', 'static/fonts/DejaVuSansMono-Oblique.ttf'))
    p.setFont('DejaVuSansMono', 14)
    date = format_date(date, format='d MMMM yyyy', locale='ru')

    y = 800
    p.drawString(100, y, f'Список покупок на {date} г.:')
    y -= 20
    p.drawString(100, y, '{}'.format('*' * 50))
    y -= 20
    for index, product in enumerate(product_list):
        if y < 50:
            p.showPage()
            p.setFont('DejaVuSansMono', 14)
            y = 800
        p.drawString(100, y,
                     '{index}. {ingredient} - {amount} {unit}'.format(
                         index=index + 1,
                         ingredient=product['ingredient__name'],
                         amount=product['total_amount'],
                         unit=product['ingredient__measurement_unit']
                     ))
        y -= 20
    y -= 20
    p.drawString(100, y, '*' * 50)
    y -= 20
    p.drawString(100, y, 'Generated by{}'
                 .format(request.build_absolute_uri('/')[:-1]))
    p.showPage()
    p.save()
    buffer.seek(0)
    return buffer
